version: '3.8'

services:
  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - eno-network

  # Backend (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://eno_user:eno_password@postgres:5432/eno_health
      - REDIS_URL=redis://redis:6379
      - MKM_CORE_AI_URL=http://mkm-core-ai:8001
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - mkm-core-ai
    networks:
      - eno-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=eno_health
      - POSTGRES_USER=eno_user
      - POSTGRES_PASSWORD=eno_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - eno-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - eno-network

  # MKM Core AI (기존 서비스)
  mkm-core-ai:
    image: mkm-core-ai:latest
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
    volumes:
      - ./mkm-core-ai:/app
    networks:
      - eno-network

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - eno-network

volumes:
  postgres_data:
  redis_data:

networks:
  eno-network:
    driver: bridge 